'use strict';

define('composer/privacySettings', ['alerts'], function (alerts) {
	var privacySettings = {};

	privacySettings.init = function (postContainer, postData) {
		var isAnonymousSelect = postContainer.find('#isAnonymousSelect');
		var isPrivateSelect = postContainer.find('#isPrivateSelect');

		if (!isAnonymousSelect.length || !isPrivateSelect.length) {
			return;
		}

		isAnonymousSelect.on('change', function () {
			privacySettings.updateSettings('isAnonymous', isAnonymousSelect.val(), postContainer, postData);
		});

		isPrivateSelect.on('change', function () {
			privacySettings.updateSettings('isPrivate', isPrivateSelect.val(), postContainer, postData);
		});

		// Pre-set the values based on postData
		if (postData.isAnonymous) {
			isAnonymousSelect.val('true');
		}

		if (postData.isPrivate) {
			isPrivateSelect.val('true');
		}
	};
    privacySettings.getIsAnonymous = function (post_uuid) {
        return $('.composer[data-uuid="' + post_uuid + '"] #isAnonymousSelect').val() === 'true';
    };
    
    privacySettings.getIsPrivate = function (post_uuid) {
        return $('.composer[data-uuid="' + post_uuid + '"] #isPrivateSelect').val() === 'true';
    };
    

	privacySettings.updateSettings = function (setting, value, postContainer, postData) {
		postData[setting] = value === 'true';
		alerts.alert('Privacy setting updated: ' + setting + ' is now ' + value);
	};

	return privacySettings;
});
